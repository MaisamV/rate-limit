version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: go-clean-postgres
    environment:
      POSTGRES_DB: go_clean_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - go-clean-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d go_clean_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: go-clean-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - go-clean-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    command: redis-server --appendonly yes

  # Database Migration Service (runs once and exits)
  migrate:
    image: migrate/migrate:v4.16.2
    container_name: go-clean-migrate
    volumes:
      - ./scripts/migrations:/migrations:ro
    networks:
      - go-clean-network
    depends_on:
      postgres:
        condition: service_healthy
    command: [
      "-path", "/migrations",
      "-database", "postgres://postgres:password@postgres:5432/go_clean_db?sslmode=disable",
      "up"
    ]
    restart: "no"

  # Go Clean Architecture Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: go-clean-app
    ports:
      - "8080:8080"
    environment:
      # Database configuration
      - GO_CLEAN_DATABASE_HOST=${DATABASE_HOST:-postgres}
      - GO_CLEAN_DATABASE_PORT=${DATABASE_PORT:-5432}
      - GO_CLEAN_DATABASE_USER=${DATABASE_USER:-postgres}
      - GO_CLEAN_DATABASE_PASSWORD=${DATABASE_PASSWORD:-password}
      - GO_CLEAN_DATABASE_DBNAME=${DATABASE_DBNAME:-go_clean_db}
      - GO_CLEAN_DATABASE_SSLMODE=${DATABASE_SSLMODE:-disable}
      # Redis configuration
      - GO_CLEAN_REDIS_HOST=${REDIS_HOST:-redis}
      - GO_CLEAN_REDIS_PORT=${REDIS_PORT:-6379}
      - GO_CLEAN_REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - GO_CLEAN_REDIS_DB=${REDIS_DB:-0}
      # Application configuration
      - GO_CLEAN_APP_ENVIRONMENT=${APP_ENVIRONMENT:-development}
      - GO_CLEAN_APP_DEBUG=${APP_DEBUG:-true}
      - GO_CLEAN_APP_NAME=${APP_NAME:-go-clean-api}
      - GO_CLEAN_APP_VERSION=${APP_VERSION:-1.0.0}
      # Server configuration
      - GO_CLEAN_SERVER_HOST=${SERVER_HOST:-0.0.0.0}
      - GO_CLEAN_SERVER_PORT=${SERVER_PORT:-8080}
      # Logging configuration
      - GO_CLEAN_LOGGING_LEVEL=${LOGGING_LEVEL:-info}
      - GO_CLEAN_LOGGING_FORMAT=${LOGGING_FORMAT:-json}
      # Swagger configuration
      - GO_CLEAN_SWAGGER_ENABLED=${SWAGGER_ENABLED:-true}
    networks:
      - go-clean-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  go-clean-network:
    driver: bridge